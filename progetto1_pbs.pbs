#!/bin/bash

# PBS directives
#PBS -q studenti
#PBS -l nodes=8:ppn=8
#PBS -N progetto1_pbs
#PBS -o progetto1_pbs.out
#PBS -e progetto1_pbs.err

# List of values to test for P and STRATEGY
P_VALUES=(1 2 3 4 5 6 7 8)
STRATEGY_VALUES=(1 2 3)

# Initialize N value
N=100

# Some information about the job can be placed here
# Calculate the number of CPUs
sort -u $PBS_NODEFILE > hostlist
NCPU=$(wc -l < hostlist)

echo "---------------------------"
echo "This job is allocated on $NCPU CPU(s)."
echo "Job is running on node(s):"
cat hostlist

PBS_O_WORKDIR=$PBS_O_HOME/Progetto1
echo "----------------------"
echo "PBS: qsub is running on $PBS_O_HOST"
echo "PBS: originating queue is $PBS_O_QUEUE"
echo "PBS: executing queue is $PBS_QUEUE"
echo "PBS: working directory is $PBS_O_WORKDIR"
echo "PBS: execution mode is $PBS_ENVIRONMENT"
echo "PBS: job identifier is $PBS_JOBID"
echo "PBS: job name is $PBS_JOBNAME"
echo "PBS: node file is $PBS_NODEFILE"
echo "PBS: current home directory is $PBS_O_HOME"
echo "PBS: PATH = $PBS_O_PATH"
echo "----------------------"

# Compile the C program
echo "Compiling $PBS_O_WORKDIR/progetto1.c"
/usr/lib64/openmpi/1.4-gcc/bin/mpicc -o $PBS_O_WORKDIR/progetto1 $PBS_O_WORKDIR/progetto1.c

# Loop over STRATEGY and P values
for STRATEGY in "${STRATEGY_VALUES[@]}"; do
  for P in "${P_VALUES[@]}"; do
    # Check if P is 1 or a power of 2 when STRATEGY is 2 or 3
    if [[ "$STRATEGY" == "2" || "$STRATEGY" == "3" ]]; then
      if [[ $P -ne 1 && $((P & (P - 1))) -ne 0 ]]; then
        continue
      fi
    fi
    # Cycle until Max number of integer is reached
    while [ $N -lt 2147483647 ]; do
      N_tmp=$((N * 16))
      while [ $N -le $N_tmp ]; do
        echo "Executing $PBS_O_WORKDIR/progetto1 with STRATEGY=$STRATEGY, P=$P, N=$N"
        # Running the C executable  
        /usr/lib64/openmpi/1.4-gcc/bin/mpiexec -machinefile hostlist -np $P $PBS_O_WORKDIR/progetto1 $N $STRATEGY
        N=$((N * 2))  # Multiply N by 2 for the next iteration
      done      
      N=$((N * 10))  # Multiply N by 10 for the next iteration
    done
  done
done
