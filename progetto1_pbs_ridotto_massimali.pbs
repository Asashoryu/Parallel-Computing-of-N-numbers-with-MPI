#!/bin/bash

# Questo PBS accetta STRATEGY e P come parametri
# PBS directives
#PBS -q studenti
#PBS -l nodes=8:ppn=8
#PBS -N progetto1_pbs_ridotto
#PBS -o progetto1_pbs_${STRATEGY}_${P}_N100000000.out
#PBS -e progetto1_pbs_${STRATEGY}_${P}_N100000000.err

# Ottieni l'orario corrente in secondi
# current_time=$(date -u +%s)

# Specifica i nomi dei file con l'orario in secondi nei PBS directives

# Some information about the job can be placed here
# Calculate the number of CPUs
sort -u $PBS_NODEFILE > hostlist
NCPU=$(wc -l < hostlist)

echo "---------------------------"
echo "This job is allocated on $NCPU CPU(s)."
echo "Job is running on node(s):"
cat hostlist

PBS_O_WORKDIR=$PBS_O_HOME/Progetto1
echo "----------------------"
echo "PBS: qsub is running on $PBS_O_HOST"
echo "PBS: originating queue is $PBS_O_QUEUE"
echo "PBS: executing queue is $PBS_QUEUE"
echo "PBS: working directory is $PBS_O_WORKDIR"
echo "PBS: execution mode is $PBS_ENVIRONMENT"
echo "PBS: job identifier is $PBS_JOBID"
echo "PBS: job name is $PBS_JOBNAME"
echo "PBS: node file is $PBS_NODEFILE"
echo "PBS: current home directory is $PBS_O_HOME"
echo "PBS: PATH = $PBS_O_PATH"
echo "----------------------"

# Compile the C program
echo "Compiling $PBS_O_WORKDIR/progetto1.c"
/usr/lib64/openmpi/1.4-gcc/bin/mpicc -o $PBS_O_WORKDIR/progetto1 $PBS_O_WORKDIR/progetto1.c


N=100000000 
  N_tmp=$N
  N_tmp_max=$((N * 16))
  while [ $N_tmp -le $N_tmp_max ]; do
    echo "Executing 10 times $PBS_O_WORKDIR/progetto1 with STRATEGY=$STRATEGY, P=$P, N=$N_tmp"
    for ((i = 1; i <= 10; i++)); do
      /usr/lib64/openmpi/1.4-gcc/bin/mpiexec -machinefile hostlist -np $P $PBS_O_WORKDIR/progetto1 $N_tmp $STRATEGY
    done
    N_tmp=$((N_tmp * 2))  # Moltiplica N per 2 per la prossima iterazione
  done


: <<'END'
# Running the C executable  
echo "Running the C executable"
/usr/lib64/openmpi/1.4-gcc/bin/mpiexec -machinefile hostlist -np 8 $PBS_O_WORKDIR/progetto1 10 2
END