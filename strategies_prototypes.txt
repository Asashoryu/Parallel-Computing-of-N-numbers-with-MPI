//Strategia 1
/*
    int menum, nproc;
    int n, nloc, tag, i, sum, sum_parz;
    int *x, *xloc, tmp;
    MPI_Status status;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &menum);ppPPpp
    MPI_Comm_size(MPI_COMM_WORLD, &nproc);

    // Distribuzione di n a tutti i processi
    MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);
    if (menum == 0) {
        // Lettura dei dati di input: n
        // In questo caso, assumiamo n come 1000
        n = 100;
        x = (int *)malloc(n * sizeof(int));
        // Inizializzazione di x con "i"
        for (i = 0; i < n; i++) {
            x[i] = i+1;
        }
    }
    nloc = n / nproc;
    int rest = n % nproc;
    if (menum < rest) {
        nloc = nloc + 1;
    }
    xloc = (int *)malloc(nloc * sizeof(int));
    
    if (menum == 0) {
        xloc = x;
        tmp = nloc;
        int start = 0;
        for (i = 1; i < nproc; i++) {
            start = start + tmp;
            tag = 22 + i;
            if (i == rest) {
                tmp = nloc - 1;  // Modifica tmp se i == rest
            }
            MPI_Send(&x[start], tmp, MPI_INT, i, tag, MPI_COMM_WORLD);
        }
    }
    else {
        tag = 22 + menum;
        MPI_Recv(xloc, nloc, MPI_INT, 0, tag, MPI_COMM_WORLD, &status);
    }

    sum = 0;

    if (menum == 0) {
        for (i = 0; i < nloc; i++) {
            sum += x[i];
        }
        for (i = 1; i < nproc; i++) {
            tag = 80 + i;
            MPI_Recv(&sum_parz, 1, MPI_INT, i, tag, MPI_COMM_WORLD, &status);
            sum += sum_parz;
        }
        printf("La somma totale è %d\n", sum);
    } else {
        for (i = 0; i < nloc; i++) {
            sum += xloc[i];
        }
        tag = menum + 80;
        MPI_Send(&sum, 1, MPI_INT, 0, tag, MPI_COMM_WORLD);
    }

    MPI_Finalize();
    return 0;
}
*/
// Strategia 2
/*
int main(int argc, char *argv[]) {
    int menum, nproc;
    int n, nloc, tag, i, sum, sum_parz;
    int *x, *xloc, tmp;
    MPI_Status status;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &menum);
    MPI_Comm_size(MPI_COMM_WORLD, &nproc);

    if (menum == 0) {
        // Lettura dei dati di input: n
        // In questo caso, assumiamo n come 1000
        n = 100;
        x = (int *)malloc(n * sizeof(int));
        // Inizializzazione di x con "i"
        for (i = 0; i < n; i++) {
            x[i] = i + 1;
        }
    }

    // Distribuzione di n a tutti i processi
    MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);

    nloc = n / nproc;
    int rest = n % nproc;
    if (menum < rest) {
        nloc = nloc + 1;
    }
    xloc = (int *)malloc(nloc * sizeof(int));

    if (menum == 0) {
        xloc = x;
        tmp = nloc;
        int start = 0;
        for (i = 1; i < nproc; i++) {
            start = start + tmp;
            tag = 22 + i;
            if (i == rest) {
                tmp = nloc - 1;  // Modifica tmp se i == rest
            }
            MPI_Send(&x[start], tmp, MPI_INT, i, tag, MPI_COMM_WORLD);
        }
    } else {
        tag = 22 + menum;
        MPI_Recv(xloc, nloc, MPI_INT, 0, tag, MPI_COMM_WORLD, &status);
    }

    sum = 0;
    for (i = 0; i < nloc; i++) {
        sum += xloc[i];
    }

    // Parte di comunicazione specificata
    int log2nproc = (int)(log(nproc) / log(2)); // Calcolo del logaritmo in base 2
    for (i = 0; i < log2nproc; i++) {
        if ((menum % (1 << i)) == 0) {
            if ((menum % (1 << (i + 1)) == 0)) {
                // Chi partecipa alla comunicazione
                int partner = menum + (1 << i);
                if (partner < nproc) {
                    int recv_tag = 300 + partner;
                    MPI_Recv(&sum_parz, 1, MPI_INT, partner, recv_tag, MPI_COMM_WORLD, &status);
                    sum += sum_parz;
                }
            } else {
                // Chi riceve
                int partner = menum - (1 << i);
                int send_tag = 300 + menum;
                MPI_Send(&sum, 1, MPI_INT, partner, send_tag, MPI_COMM_WORLD);
            }
        }
    }
    
    printf("La somma totale per il processore %d è %d\n", menum, sum);

    MPI_Finalize();
    return 0;
}
*/
// Strategia 3
/*
int main(int argc, char *argv[]) {
    int menum, nproc;
    int n, nloc, tag, i, sum, sum_parz, sum_tmp;
    int *x, *xloc, tmp;
    MPI_Status status;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &menum);
    MPI_Comm_size(MPI_COMM_WORLD, &nproc);

    if (menum == 0) {
        // Lettura dei dati di input: n
        // In questo caso, assumiamo n come 1000
        n = 100;
        x = (int *)malloc(n * sizeof(int));
        // Inizializzazione di x con "i"
        for (i = 0; i < n; i++) {
            x[i] = i + 1;
        }
    }

    // Distribuzione di n a tutti i processi
    MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);

    nloc = n / nproc;
    int rest = n % nproc;
    if (menum < rest) {
        nloc = nloc + 1;
    }
    xloc = (int *)malloc(nloc * sizeof(int));

    if (menum == 0) {
        xloc = x;
        tmp = nloc;
        int start = 0;
        for (i = 1; i < nproc; i++) {
            start = start + tmp;
            tag = 22 + i;
            if (i == rest) {
                tmp = nloc - 1;  // Modifica tmp se i == rest
            }
            MPI_Send(&x[start], tmp, MPI_INT, i, tag, MPI_COMM_WORLD);
        }
    } else {
        tag = 22 + menum;
        MPI_Recv(xloc, nloc, MPI_INT, 0, tag, MPI_COMM_WORLD, &status);
    }

    sum = 0;
    for (i = 0; i < nloc; i++) {
        sum += xloc[i];
    }

    // Parte di comunicazione specificata
    int log2nproc = (int)(log(nproc) / log(2)); // Calcolo del logaritmo in base 2
    for (i = 0; i < log2nproc; i++) {
        if ((menum % (1 << i + 1)) < (1 << i)) {
            int partner = menum + (1 << i);
            // Spedisci a menum + 2^i
            int send_tag = 300 + menum;
            MPI_Send(&sum, 1, MPI_INT, partner, send_tag, MPI_COMM_WORLD);
            // Ricevi da menum + 2^i
            int recv_tag = 300 + partner;
            MPI_Recv(&sum_parz, 1, MPI_INT, partner, recv_tag, MPI_COMM_WORLD, &status);
            sum += sum_parz;
        } else {
            int partner = menum - (1 << i);
            sum_tmp = sum;
            // Ricevi da menum - 2^i
            int recv_tag = 300 + partner;
            MPI_Recv(&sum_parz, 1, MPI_INT, partner, recv_tag, MPI_COMM_WORLD, &status);
            sum += sum_parz;
            // Spedisci a menum - 2^i
            int send_tag = 300 + menum;
            MPI_Send(&sum_tmp, 1, MPI_INT, partner, send_tag, MPI_COMM_WORLD);
        }
    }

    printf("\nSono il processo %d: Somma totale=%d\n", menum, sum);

    MPI_Finalize();
    return 0;
}
*/